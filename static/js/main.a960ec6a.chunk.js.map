{"version":3,"sources":["TodoListItem.js","TodoList.js","TodoCreateForm.js","App.js","serviceWorker.js","index.js"],"names":["TodoListItem","title","id","done","markUnmark","deleteCurrentTodo","todoUpdate","listStyle","textDecoration","markUnmarkText","isShowButton","onClick","setIsEditMode","useState","isEditMode","newTodo","setNewTodo","style","onChange","e","target","value","TodoList","list","map","el","key","TodoCreateForm","create","inputValue","setInputValue","type","initialList","uuid","undefined","App","setList","align","newItem","currentId","markedList","updatedList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a960ec6a.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nexport default function TodoListItem({title, id, done, markUnmark, deleteCurrentTodo, todoUpdate}) {\r\n// -----------------------------------------------------------------\r\n\r\n    const listStyle = {\r\n        listStyle: \"none\",                              // стиль \"убрать точки при выводе каждого элемента массива list\"\r\n        textDecoration: done ? \"line-through\" : null    // выбрать стиль текста (перечеркивать или нет) в зависимости от значения поля done\r\n    };\r\n\r\n    const markUnmarkText = done? \"Отменить отметку\" :   // выбрать текст \"Отменить отметку\" или\r\n        \"Сделано\"              // \"Сделано\"\r\n                               // в зависимости от значения поля done true или false\r\n\r\n    const isShowButton = id !== 1234567890              // проверяем значение id\r\n        ? (                                             // если id - не 1234567890, выполняем код ниже\r\n            <span>\r\n                     <button\r\n                         onClick={() => markUnmark(id)}>    {/* назначить функцию markUnmark (Инвертирование поля done) кнопке */}\r\n                         {markUnmarkText}                   {/* с текстом \"Отменить отметку\" или \"Сделано\" */}\r\n                         {/* в зависимости от значения поля done *!/*/}\r\n                     </button>\r\n                     <button\r\n                         onClick={() => deleteCurrentTodo(id)}> {/* назначить функцию deleteCurrentTodo (Удалить текущий объект) */}\r\n                         Удалить элемент                        {/* кнопке с текстом \"Удалить элемент\" */}\r\n                     </button>\r\n                     <button onClick={() => setIsEditMode(true)}>   {/* включить режим editMode */}\r\n                         Редактировать                                   {/* надпись на кнопке */}\r\n                     </button>\r\n            </span>\r\n        )\r\n        : null                                                              // для элемента с id 1234567890 не выводить кнопки\r\n\r\n    const [isEditMode, setIsEditMode] = useState(false);           // заводим useState для управления режимом редактирования\r\n\r\n    const [newTodo, setNewTodo] = useState(title);                          // заводим useState для получения нового значения title->newTodo\r\n\r\n    const inputHandler = (e) => {setNewTodo (e.target.value)}               // получить значение todo\r\n\r\n    const saveButtonHandler = () => {todoUpdate (id, newTodo);              // вызвать функцию перезаписи нового значения todo в текущий объект\r\n        setIsEditMode(false)}              // выключить режим editMode\r\n// -----------------------------------------------------------------\r\n    if (isEditMode) {\r\n        return (\r\n            <li style={listStyle}>\r\n                <div>\r\n                    <input onChange={inputHandler} value={newTodo}/>    {/* получить новое значение */}\r\n                    <button onClick={saveButtonHandler}>                {/* записать новое значение */}\r\n                        Сохранить                                           {/* надпись на кнопке */}\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        )\r\n    } else {\r\n        return (\r\n\r\n            <li style={listStyle}>\r\n                {title}             {/* вывести поле title текущего объекта (элементам массива list) */}\r\n                {isShowButton}      {/* вывести три кнопки, если на входе элемент не с id=234567890 */}\r\n            </li>\r\n        )\r\n    }\r\n\r\n//     return (\r\n//         <div>\r\n//         { isEditMode ? (\r\n//             <div>\r\n//                 <input onChange={inputHandler} value={newTodo}/>    {/* получить новое значение */}\r\n//                 <button onClick={saveButtonHandler}>                {/* записать новое значение */}\r\n//                 Сохранить                                           {/* надпись на кнопке */}\r\n//                 </button>\r\n//             </div>\r\n//             ):(\r\n//             <div>\r\n//                 <li style={listStyle}>                              {/* выводить все элементы массива list со стилями, определёнными переменной listStyle */}\r\n//\r\n//                     {title}                                         {/* вывести поле title текущего объекта (элементам массива list) */}\r\n//\r\n//                     <button onClick={()=>markUnmark(id)}>           {/* назначить функцию markUnmark (Инвертирование поля done) кнопке */}\r\n//                     {markUnmarkText}                                {/* с текстом \"Отменить отметку\" или \"Сделано\" */}\r\n//                                                                     {/* в зависимости от значения поля done *!/*/}\r\n//                     </button>\r\n//\r\n//                     <button onClick={()=>deleteCurrentTodo(id)}>    {/* назначить функцию deleteCurrentTodo (Удалить текущий объект) */}\r\n//                     Удалить элемент                                 {/* кнопке с текстом \"Удалить элемент\" */}\r\n//                     </button>\r\n//\r\n//                     <button onClick={()=>setIsEditMode(true)}> {/* включить режим editMode */}\r\n//                     Редактировать                                       {/* надпись на кнопке */}\r\n//                     </button>\r\n//                 </li>\r\n//             </div>) }\r\n//         </div>\r\n//         );\r\n}","import React from 'react';\r\nimport TodoListItem from \"./TodoListItem\";\r\nexport default function TodoList({list, markUnmark, deleteCurrentTodo, todoUpdate}) {\r\n// -----------------------------------------------------------------\r\n// const {list}=props - можно и так получить из пропсов поля объекта массива list\r\n// -----------------------------------------------------------------\r\n    return (\r\n        <div>\r\n            {list.map(el=> <TodoListItem\r\n                id={el.id}\r\n                key={el.id}                         // Поле key обязательно, 'Warning: Each child in a list should have a unique \"key\" prop'\r\n                title={el.title}\r\n                done={el.done}\r\n                deleteCurrentTodo={deleteCurrentTodo}\r\n                markUnmark={markUnmark}\r\n                todoUpdate={todoUpdate}\r\n            />)}\r\n        </div>\r\n    );\r\n}","import React,{useState} from 'react';\r\nexport default function TodoCreateForm({create}) {\r\n// -----------------------------------------------------------------\r\n\r\n    const [inputValue, setInputValue] = useState('Построить работающий фотонный звездолёт в 2075 году');   // useState со значением по умолчанию\r\n    const inputOnChange = (e) => {setInputValue(e.target.value)};                                       // получить только e.target.value\r\n\r\n    // const inputOnChange = (e) => {console.log(e.target.value); setInputValue(e.target.value)};       // вариант для отладки\r\n\r\n    const onCreate = ( ) => {create(inputValue);\r\n        setInputValue('Построить работающий фотонный звездолёт в 2075 году');}\r\n\r\n// -----------------------------------------------------------------\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}                    // inputValue - переменная, куда будет занесён введённый в окне текст\r\n                onChange={inputOnChange}              // onChange -  обработчик\r\n            />\r\n            <button onClick={onCreate}>Новая цель</button>\r\n        </div>\r\n    );\r\n}","// создано с помощью лекций Виктора, Евгения и Романа Николаенкова\n\nimport React, {useState} from 'react';\nimport \"./App.css\"\nimport TodoList from \"./TodoList\";\nimport TodoCreateForm from \"./TodoCreateForm\";\nimport {v4 as uuid} from \"uuid\"     // для получения настоящего id, в дальнейшем применять так: uuid()\n                                    // нужно выполнить команду в терминале \"npm install uuidv4\"\n\nconst initialList = [               // задаем массив объектов, каждый объект состоит из трех полей - id, title, done\n  {id: uuid(), title: \"Запустить Falcon 1\", done: true},\n  {id: uuid(), title: \"Получить клиентов\", done: true},\n  {id: uuid(), title: \"Получить контракт с NASA\", done: true},\n  {id: uuid(), title: \"Запустить Falcon 9\", done: true},\n  {id: uuid(), title: \"Построить свой пилотируемый корабль\", done: true},\n  {id: uuid(), title: \"Запустить его к МКС\", done: true},\n  {id: uuid(), title: \"Запустить геостационарный спутник\", done: true},\n  {id: uuid(), title: \"Учиться садить ракеты на Землю\", done: true},\n  {id: uuid(), title: \"Посадить хоть одну ракету на Землю\", done: true},\n  {id: uuid(), title: \"Посадить хоть одну ракету на баржу\", done: true},\n  {id: uuid(), title: \"Посадить хоть одну ракету на Землю после вывода на ГПО\", done: true},\n  {id: uuid(), title: \"Запустить б/у ракету\", done: true},\n  {id: uuid(), title: \"Запустить Falcon Heavy\", done: true},\n  {id: uuid(), title: \"Вернуть обтекатель\", done: true},\n  {id: uuid(), title: \"Сделать Crew Dragon\", done: true},\n  {id: uuid(), title: \"Повторно использовать обтекатель\", done: true},\n  {id: uuid(), title: \"Начать запуски с астронавтами\", done: true},\n  {id: 1234567890, title: \"--- Вы находитесь здесь ---\", done: undefined},\n// вы находитесь здесь\n  {id: uuid(), title: \"Переделать конструкцию Starship для полётов на Луну в 2020 году\", done: false},\n  {id: uuid(), title: \"Вместе с NASA и Jeff Bezos организовать постоянную базу на Луне в 2022 году\", done: false},\n  {id: uuid(), title: \"Запустить корабль на Марс в 2022 году\", done: false},\n  {id: uuid(), title: \"Посадить автоматический корабль на Марс в 2022 году\", done: false},\n  {id: uuid(), title: \"Посадить пилотируемый корабль на Марс в 2024 году\", done: false},\n  {id: uuid(), title: \"Организовать колонию на Марсе в 2030 году\", done: false},\n  {id: uuid(), title: \"Терраформировать Марс в 2050 году\", done: false}\n]\n// -----------------------------------------------------------------\nexport default function App() {\n  const [list, setList] = useState(initialList); // задаём начальное значение переменной list через через переменную initialList\n\n  // const [list, setList] = useState([{id: 1, title: \"First Todo\", done: true},          // вариант задания начального\n  //                                           {id: 2, title: \"Second Todo\", done: true}, // массива объектов напрямую,\n  //                                           {id: 3, title: \"Third Todo\", done: false}, // а не через переменную initialList\n  //                                           {id: 4, title: \"4th Todo\", done: false}]); //\n// -----------------------------------------------------------------\n  function create (title) {   // классический вариант создания неанонимной функции без стрелки\n    const newItem = {id: uuid(), title: title, done: false} // создание нового элемента массива\n    // console.log({newItem})                // для отладки\n    // console.log({list})                   // для отладки\n    setList([...list, newItem])      // вставка нового элемента в текущий массив\n    // console.log({list})                   // для отладки\n  }\n// --- предыдушие интересные варианты ---\n//     const create = (title) => {       // функция для создания нового Todo, на входе - текст title\n// console.log(`title=${title}`)         // для отладки\n//     const newItem = {                     // структура нового элемента Todo:\n//             id: Math.random() * 1000000000000000000,    // id - генерируется псевдослучайным образом\n//             title: title,                               // title - получаем на входе из компонента TodoCreateForm\n//             done: false}                                // состояние по умолчанию - false, ещё не выполнено\n// console.log({newItem})                // для отладки\n//     setList([...list, newItem]);            // вариант прямого, без участия переменной, ререндеринга\n//     const updatedList = [...list, newItem]; // вариант ререндеринга через создание переменной updateList\n//     setList(updatedList);                   // сделать ререндеринг\n// console.log({updatedList})            // для отладки\n// console.log({list})                   // для отладки\n// console.log('---------------')        // для отладки\n//     };\n// -----------------------------------------------------------------\n  function markUnmark (currentId) {               // универсальная функция Инвертирование поля done=\"вкл-выкл перечёркивание\"\n    // console.log(todoId)                      // для отладки\n    const markedList = list.map (el => {            // перебираем входной массива list по el (каждый el - объект массива list)\n      if (el.id === currentId)                    // если поле id текущего перебираемого элемента массива list (то есть поле id объекта)\n          // равно переданному из TodoListItem, то\n        return ({...el,done: !el.done})         // инвертировать поле done (интересный приём - spread объекта + значение поля done\n                                                // инвертировать и заменить им имеющееся значение),\n      return el;                                  // иначе ничего не делать с этим элементом (объектом)\n    })\n    setList(markedList);                        // сделать ререндеринг\n  }\n// -----------------------------------------------------------------\n  function deleteCurrentTodo (currentId) {        // функция удаления элемента массива list (объекта) по полю id, присланному из TodoListItem\n    const updatedList = [...list].filter        // копируем текущий массив list spread'ом, применяя метод filter:\n        (el => el.id !== currentId)                 // копировать те элементы, поле id которых не равно id, присланному из TodoListItem\n    setList(updatedList);                       // сделать ререндеринг\n  }\n// -----------------------------------------------------------------\n  const todoUpdate = (currentId, newTodo) => {    // функция замены текста поля title на новое значение newTodo\n    const updatedList = list.map (el => {       // перебираем входной массива list по el (каждый el - объект массива list)\n      if  (el.id === currentId)               // если поле id текущего перебираемого элемента массива list (поле id объекта)\n          // равно переданному из TodoListItem, то\n        return {...el, title: newTodo}          // заменить в нужном элементе поле title на поле newTodo (из TodoListItem),\n      return el                               // иначе ничего не делать с этим элементом (объектом)\n    })\n    setList(updatedList);                       // сделать ререндеринг\n  }\n// -----------------------------------------------------------------\n  return (\n      <div align=\"center\">\n        <h4>Elon Musk's Todo List</h4>\n        <TodoCreateForm create={create}/>   {/* вызываем компонент TodoCreateForm, чтобы иметь возможность ввести новый Todo */}\n        {/* {console.log({list})}           // для отладки */}\n        <TodoList list={list} markUnmark={markUnmark} deleteCurrentTodo={deleteCurrentTodo} todoUpdate={todoUpdate}/> {/* Чтобы наш \"Todo list\" отрисовался */}\n      </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}